import{o as n,c as e,d as a,a as s}from"./app.451b6f6d.js";const t='{"title":"Loading states","description":"","frontmatter":{},"relativePath":"guide/loading-states.md","lastUpdated":1633668034973}',o={},l=a('<h1 id="loading-states"><a class="header-anchor" href="#loading-states" aria-hidden="true">#</a> Loading states</h1><p><strong>vue-eternal-loading</strong> component has 4 different states which can render different templates and have influence on component&#39;s behaviour:</p><ul><li><p><strong>loading</strong> - it&#39;s a default state when we try to load some new content. In this state <code>load</code> prop triggers automatically when it needed. Default template: <code>&lt;div class=&quot;loading&quot;&gt;Loading...&lt;/div&gt;</code></p></li><li><p><strong>no-more</strong> - this state means than we have no more content ( server replied with empty content or content less than full page ). In this state <code>load</code> is not calling anymore. Default template: <code>&lt;div class=&quot;no-more&quot;&gt;No more.&lt;/div&gt;</code></p></li><li><p><strong>no-results</strong> - this state means that we have no content at all. Maybe we have tried to load something from a server, but we got 0 items in our first request, and in this case we may want to show &#39;No results message&#39;. In this state <code>load</code> is not calling anymore. Default template: <code>&lt;div class=&quot;no-results&quot;&gt;No results.&lt;/div&gt;</code></p></li><li><p><strong>error</strong> - this state indicates that we got an error from the server or anywhere else. In this state <code>load</code> is not calling anymore. Default template: <code>&lt;div class=&quot;error&quot;&gt;Error.&lt;/div&gt;</code></p></li></ul><p>We can switch between states automatically, just using <code>loaded</code> callback inside <code>load</code> prop method, and we&#39;ll describe it below. Or we can set any state manually, and we will explain it in the further section.</p><hr><p>In some cases we may not want to have state different from <strong>loading</strong>. For example, when we want to implement loading which shouldn&#39;t stop ever. It can be logs loading, realtime news loading or just trying to load something forever. To have this behaviour we have to call <code>loaded</code> callback without params:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> loaded <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Load data from server</span>\n  <span class="token comment">// ...</span>\n  <span class="token function">loaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',7),c=s("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/0ak1f69t/5/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),p=a('<hr><p>If we use <code>loaded</code> callback with 1 param ( items count ) we can rich 2 states now: <code>no-more</code>, <code>no-results</code>. We may want to have this states to render corresponding templates. If we call <code>loaded(0)</code> on our first load - we will get <strong>no-results</strong> state.</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> loaded <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Load data from server</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// And items.length === 0 </span>\n  <span class="token function">loaded</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',3),r=s("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/4gdht3ap/3/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),d=a('<p>If we call <code>loaded(0)</code> on our second+ load - we will get <strong>no-more</strong> state. Which means that we have loaded content before, but we reached the end now.</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> loaded <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Load data from server</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// items.length === 0 and this is 2+ try</span>\n  <span class="token function">loaded</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',2),i=s("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/uwapjzk8/6/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),u=a('<p>You can admit in example above that we have 1 extra request, before we riched state <code>no-more</code>. It happens because we do not know exact page size and we can set state <code>no-more</code> only if we get empty response. It&#39;s okay if you don&#39;t know for sure what&#39;s your page size or you may have floating items count per request. But in case when you expect exact items count per page it&#39;s a good practice to pass second param to <code>loaded</code> callback, where you should specify your page size. It prevents unnecessary extra request to server and set state <code>no-more</code> when we will get items count less than page size:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">PAGE_SIZE</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> loaded <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Load data from server</span>\n  <span class="token comment">// ...</span>\n  <span class="token function">loaded</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token constant">PAGE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',2),m=s("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/gavrashenko/pe58wszL/78/embedded/result/dark/",allowfullscreen:"allowfullscreen",allowpaymentrequest:"",frameborder:"0"},null,-1),h=a("<hr><p>We have one more state <code>error</code>, but we can&#39;t rich it automatically, just using <code>loaded</code> callback. It&#39;s because <strong>vue-eternal-loading</strong> have no idea about loading errors, and it can switch states based on information which you pass to <code>loaded</code> and it&#39;s not enough information to set <code>error</code> state. How to set <code>error</code> state manually we will learn further in the next sections.</p>",2);o.render=function(a,s,t,o,k,g){return n(),e("div",null,[l,c,p,r,d,i,u,m,h])};export default o;export{t as __pageData};
